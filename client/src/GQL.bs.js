// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ApolloClient__React_Hooks_UseQuery = require("reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js");
var ApolloClient__React_Hooks_UseMutation = require("reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js");
var ApolloClient__React_Hooks_UseSubscription = require("reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js");

var Raw = {};

var query = (require("@apollo/client").gql`
  mutation ChangeCompanyName($input: ChangeCompanyInput!)  {
    changeCompanyName(input: $input)  {
      __typename
      id
      name
    }
  }
`);

function parse(value) {
  var value$1 = value.changeCompanyName;
  return {
          changeCompanyName: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                id: value$1.id,
                name: value$1.name
              }) : undefined
        };
}

function serialize(value) {
  var value$1 = value.changeCompanyName;
  var changeCompanyName;
  if (value$1 !== undefined) {
    var value$2 = value$1.name;
    var value$3 = value$1.id;
    var value$4 = value$1.__typename;
    changeCompanyName = {
      __typename: value$4,
      id: value$3,
      name: value$2
    };
  } else {
    changeCompanyName = null;
  }
  return {
          changeCompanyName: changeCompanyName
        };
}

function serializeInputObjectChangeCompanyInput(inp) {
  return {
          id: inp.id,
          name: inp.name
        };
}

function serializeVariables(inp) {
  return {
          input: serializeInputObjectChangeCompanyInput(inp.input)
        };
}

function makeVariables(input, param) {
  return {
          input: input
        };
}

function makeInputObjectChangeCompanyInput(id, name, param) {
  return {
          id: id,
          name: name
        };
}

var ChangeCompanyName_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  serializeInputObjectChangeCompanyInput: serializeInputObjectChangeCompanyInput,
  makeVariables: makeVariables,
  makeInputObjectChangeCompanyInput: makeInputObjectChangeCompanyInput
};

var include = ApolloClient__React_Hooks_UseMutation.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var ChangeCompanyName_use = include.use;

var ChangeCompanyName_useWithVariables = include.useWithVariables;

var ChangeCompanyName = {
  ChangeCompanyName_inner: ChangeCompanyName_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  serializeInputObjectChangeCompanyInput: serializeInputObjectChangeCompanyInput,
  makeVariables: makeVariables,
  makeInputObjectChangeCompanyInput: makeInputObjectChangeCompanyInput,
  use: ChangeCompanyName_use,
  useWithVariables: ChangeCompanyName_useWithVariables
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  mutation AddCompany($name: String!)  {
    addCompany(name: $name)  {
      __typename
      id
      name
    }
  }
`);

function parse$1(value) {
  var value$1 = value.addCompany;
  return {
          addCompany: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                id: value$1.id,
                name: value$1.name
              }) : undefined
        };
}

function serialize$1(value) {
  var value$1 = value.addCompany;
  var addCompany;
  if (value$1 !== undefined) {
    var value$2 = value$1.name;
    var value$3 = value$1.id;
    var value$4 = value$1.__typename;
    addCompany = {
      __typename: value$4,
      id: value$3,
      name: value$2
    };
  } else {
    addCompany = null;
  }
  return {
          addCompany: addCompany
        };
}

function serializeVariables$1(inp) {
  return {
          name: inp.name
        };
}

function makeVariables$1(name, param) {
  return {
          name: name
        };
}

var AddCompany_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseMutation.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var AddCompany_use = include$1.use;

var AddCompany_useWithVariables = include$1.useWithVariables;

var AddCompany = {
  AddCompany_inner: AddCompany_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  use: AddCompany_use,
  useWithVariables: AddCompany_useWithVariables
};

var Raw$2 = {};

var query$2 = (require("@apollo/client").gql`
  mutation DeleteCompany($id: Int!)  {
    deleteCompany(id: $id)
  }
`);

function parse$2(value) {
  var value$1 = value.deleteCompany;
  return {
          deleteCompany: !(value$1 == null) ? value$1 : undefined
        };
}

function serialize$2(value) {
  var value$1 = value.deleteCompany;
  var deleteCompany = value$1 !== undefined ? value$1 : null;
  return {
          deleteCompany: deleteCompany
        };
}

function serializeVariables$2(inp) {
  return {
          id: inp.id
        };
}

function makeVariables$2(id, param) {
  return {
          id: id
        };
}

var DeleteCompany_inner = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2
};

var include$2 = ApolloClient__React_Hooks_UseMutation.Extend({
      query: query$2,
      Raw: Raw$2,
      parse: parse$2,
      serialize: serialize$2,
      serializeVariables: serializeVariables$2
    });

var DeleteCompany_use = include$2.use;

var DeleteCompany_useWithVariables = include$2.useWithVariables;

var DeleteCompany = {
  DeleteCompany_inner: DeleteCompany_inner,
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  use: DeleteCompany_use,
  useWithVariables: DeleteCompany_useWithVariables
};

var Raw$3 = {};

var query$3 = (require("@apollo/client").gql`
  subscription CompanyNameChanged  {
    companyNameChanged  {
      __typename
      id
      name
    }
  }
`);

function parse$3(value) {
  var value$1 = value.companyNameChanged;
  return {
          companyNameChanged: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                id: value$1.id,
                name: value$1.name
              }) : undefined
        };
}

function serialize$3(value) {
  var value$1 = value.companyNameChanged;
  var companyNameChanged;
  if (value$1 !== undefined) {
    var value$2 = value$1.name;
    var value$3 = value$1.id;
    var value$4 = value$1.__typename;
    companyNameChanged = {
      __typename: value$4,
      id: value$3,
      name: value$2
    };
  } else {
    companyNameChanged = null;
  }
  return {
          companyNameChanged: companyNameChanged
        };
}

function serializeVariables$3(param) {
  
}

function makeVariables$3(param) {
  
}

function makeDefaultVariables(param) {
  
}

var CompanyNameChanged_inner = {
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3,
  makeDefaultVariables: makeDefaultVariables
};

var include$3 = ApolloClient__React_Hooks_UseSubscription.Extend({
      query: query$3,
      Raw: Raw$3,
      parse: parse$3,
      serialize: serialize$3,
      serializeVariables: serializeVariables$3
    });

var CompanyNameChanged_use = include$3.use;

var CompanyNameChanged = {
  CompanyNameChanged_inner: CompanyNameChanged_inner,
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3,
  makeDefaultVariables: makeDefaultVariables,
  use: CompanyNameChanged_use
};

var Raw$4 = {};

var query$4 = (require("@apollo/client").gql`
  subscription CompanyAdded  {
    companyAdded  {
      __typename
      id
      name
    }
  }
`);

function parse$4(value) {
  var value$1 = value.companyAdded;
  return {
          companyAdded: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                id: value$1.id,
                name: value$1.name
              }) : undefined
        };
}

function serialize$4(value) {
  var value$1 = value.companyAdded;
  var companyAdded;
  if (value$1 !== undefined) {
    var value$2 = value$1.name;
    var value$3 = value$1.id;
    var value$4 = value$1.__typename;
    companyAdded = {
      __typename: value$4,
      id: value$3,
      name: value$2
    };
  } else {
    companyAdded = null;
  }
  return {
          companyAdded: companyAdded
        };
}

function serializeVariables$4(param) {
  
}

function makeVariables$4(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var CompanyAdded_inner = {
  Raw: Raw$4,
  query: query$4,
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4,
  makeDefaultVariables: makeDefaultVariables$1
};

var include$4 = ApolloClient__React_Hooks_UseSubscription.Extend({
      query: query$4,
      Raw: Raw$4,
      parse: parse$4,
      serialize: serialize$4,
      serializeVariables: serializeVariables$4
    });

var CompanyAdded_use = include$4.use;

var CompanyAdded = {
  CompanyAdded_inner: CompanyAdded_inner,
  Raw: Raw$4,
  query: query$4,
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4,
  makeDefaultVariables: makeDefaultVariables$1,
  use: CompanyAdded_use
};

var Raw$5 = {};

var query$5 = (require("@apollo/client").gql`
  subscription CompanyRemoved  {
    companyRemoved  {
      __typename
      id
    }
  }
`);

function parse$5(value) {
  var value$1 = value.companyRemoved;
  return {
          companyRemoved: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                id: value$1.id
              }) : undefined
        };
}

function serialize$5(value) {
  var value$1 = value.companyRemoved;
  var companyRemoved;
  if (value$1 !== undefined) {
    var value$2 = value$1.id;
    var value$3 = value$1.__typename;
    companyRemoved = {
      __typename: value$3,
      id: value$2
    };
  } else {
    companyRemoved = null;
  }
  return {
          companyRemoved: companyRemoved
        };
}

function serializeVariables$5(param) {
  
}

function makeVariables$5(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var CompanyRemoved_inner = {
  Raw: Raw$5,
  query: query$5,
  parse: parse$5,
  serialize: serialize$5,
  serializeVariables: serializeVariables$5,
  makeVariables: makeVariables$5,
  makeDefaultVariables: makeDefaultVariables$2
};

var include$5 = ApolloClient__React_Hooks_UseSubscription.Extend({
      query: query$5,
      Raw: Raw$5,
      parse: parse$5,
      serialize: serialize$5,
      serializeVariables: serializeVariables$5
    });

var CompanyRemoved_use = include$5.use;

var CompanyRemoved = {
  CompanyRemoved_inner: CompanyRemoved_inner,
  Raw: Raw$5,
  query: query$5,
  parse: parse$5,
  serialize: serialize$5,
  serializeVariables: serializeVariables$5,
  makeVariables: makeVariables$5,
  makeDefaultVariables: makeDefaultVariables$2,
  use: CompanyRemoved_use
};

var Raw$6 = {};

var query$6 = (require("@apollo/client").gql`
  query Companies  {
    companies  {
      __typename
      id
      name
    }
  }
`);

function parse$6(value) {
  var value$1 = value.companies;
  return {
          companies: !(value$1 == null) ? value$1.map(function (value) {
                  if (!(value == null)) {
                    return {
                            __typename: value.__typename,
                            id: value.id,
                            name: value.name
                          };
                  }
                  
                }) : undefined
        };
}

function serialize$6(value) {
  var value$1 = value.companies;
  var companies = value$1 !== undefined ? value$1.map(function (value) {
          if (value === undefined) {
            return null;
          }
          var value$1 = value.name;
          var value$2 = value.id;
          var value$3 = value.__typename;
          return {
                  __typename: value$3,
                  id: value$2,
                  name: value$1
                };
        }) : null;
  return {
          companies: companies
        };
}

function serializeVariables$6(param) {
  
}

function makeVariables$6(param) {
  
}

function makeDefaultVariables$3(param) {
  
}

var Companies_inner = {
  Raw: Raw$6,
  query: query$6,
  parse: parse$6,
  serialize: serialize$6,
  serializeVariables: serializeVariables$6,
  makeVariables: makeVariables$6,
  makeDefaultVariables: makeDefaultVariables$3
};

var include$6 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$6,
      Raw: Raw$6,
      parse: parse$6,
      serialize: serialize$6,
      serializeVariables: serializeVariables$6
    });

var Companies_refetchQueryDescription = include$6.refetchQueryDescription;

var Companies_use = include$6.use;

var Companies_useLazy = include$6.useLazy;

var Companies_useLazyWithVariables = include$6.useLazyWithVariables;

var Companies = {
  Companies_inner: Companies_inner,
  Raw: Raw$6,
  query: query$6,
  parse: parse$6,
  serialize: serialize$6,
  serializeVariables: serializeVariables$6,
  makeVariables: makeVariables$6,
  makeDefaultVariables: makeDefaultVariables$3,
  refetchQueryDescription: Companies_refetchQueryDescription,
  use: Companies_use,
  useLazy: Companies_useLazy,
  useLazyWithVariables: Companies_useLazyWithVariables
};

exports.ChangeCompanyName = ChangeCompanyName;
exports.AddCompany = AddCompany;
exports.DeleteCompany = DeleteCompany;
exports.CompanyNameChanged = CompanyNameChanged;
exports.CompanyAdded = CompanyAdded;
exports.CompanyRemoved = CompanyRemoved;
exports.Companies = Companies;
/* query Not a pure module */
