// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var GQL = require("../GQL.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function Query_SubscribeToMore(Props) {
  var queryResult = Curry.app(GQL.CompaniesQuery.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  React.useEffect((function () {
          Curry._5(queryResult.subscribeToMore, {
                query: GQL.CompanyAddedSub.query,
                Raw: GQL.CompanyAddedSub.Raw,
                parse: GQL.CompanyAddedSub.parse,
                serialize: GQL.CompanyAddedSub.serialize,
                serializeVariables: GQL.CompanyAddedSub.serializeVariables
              }, (function (previous, param) {
                  var companyAdded = param.subscriptionData.data.companyAdded;
                  var id = Belt_Option.getWithDefault(Belt_Option.map(companyAdded, (function (c) {
                              return c.id;
                            })), 0);
                  var __typename = Belt_Option.getWithDefault(Belt_Option.map(companyAdded, (function (c) {
                              return c.__typename;
                            })), "");
                  var name = Belt_Option.getWithDefault(Belt_Option.map(companyAdded, (function (c) {
                              return c.name;
                            })), "");
                  var t_companies = previous.companies;
                  var newCompanies;
                  if (t_companies !== undefined) {
                    if (t_companies.length !== 0) {
                      var t_companies$1 = Belt_Array.keepMap(t_companies, (function (e) {
                              return Caml_option.some(e);
                            }));
                      var newCompany = {
                        __typename: __typename,
                        id: id,
                        name: name
                      };
                      newCompanies = Belt_Array.concat(t_companies$1, [newCompany]);
                    } else {
                      newCompanies = [];
                    }
                  } else {
                    newCompanies = [];
                  }
                  return {
                          companies: newCompanies
                        };
                }), undefined, undefined, undefined);
          
        }), []);
  var match = queryResult.data;
  var tmp;
  if (match !== undefined) {
    var companies = match.companies;
    var companies$1 = companies !== undefined && companies.length !== 0 ? Belt_Array.keepMap(companies, (function (e) {
              return Caml_option.some(e);
            })).length : 0;
    tmp = React.createElement("p", undefined, "There are " + (String(companies$1) + " Companies"));
  } else {
    tmp = null;
  }
  return React.createElement(React.Fragment, undefined, React.createElement("p", undefined, "[ Companies Count Subscription will show here ]"), tmp);
}

var make = Query_SubscribeToMore;

exports.make = make;
/* GQL Not a pure module */
