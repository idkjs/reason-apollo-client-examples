// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ApolloClient__React_Hooks_UseSubscription = require("reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js");

var Raw = {};

var query = (require("@apollo/client").gql`
  subscription CompanyAdded  {
    companyAdded  {
      __typename
      id
      name
    }
  }
`);

function parse(value) {
  var value$1 = value.companyAdded;
  return {
          companyAdded: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                id: value$1.id,
                name: value$1.name
              }) : undefined
        };
}

function serialize(value) {
  var value$1 = value.companyAdded;
  var companyAdded;
  if (value$1 !== undefined) {
    var value$2 = value$1.name;
    var value$3 = value$1.id;
    var value$4 = value$1.__typename;
    companyAdded = {
      __typename: value$4,
      id: value$3,
      name: value$2
    };
  } else {
    companyAdded = null;
  }
  return {
          companyAdded: companyAdded
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var CompanyAddedSubscription_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseSubscription.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var CompanyAddedSubscription = {
  CompanyAddedSubscription_inner: CompanyAddedSubscription_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  use: use
};

function Subscription(Props) {
  var _ignoredForExample = Curry._7(use, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
  var match = _ignoredForExample.data;
  var tmp;
  if (match !== undefined) {
    var match$1 = match.companyAdded;
    tmp = match$1 !== undefined ? React.createElement("p", undefined, "New company is: " + match$1.name) : null;
  } else {
    tmp = null;
  }
  return React.createElement(React.Fragment, undefined, React.createElement("p", undefined, "[ New Companies Subscription will show here ]"), tmp);
}

var make = Subscription;

exports.CompanyAddedSubscription = CompanyAddedSubscription;
exports.make = make;
/* query Not a pure module */
